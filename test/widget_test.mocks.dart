// Mocks generated by Mockito 5.0.15 from annotations
// in ntt_flutter_test/test/currency_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i9;
import 'dart:ui' as _i13;

import 'package:http/src/base_request.dart' as _i10;
import 'package:http/src/client.dart' as _i7;
import 'package:http/src/response.dart' as _i3;
import 'package:http/src/streamed_response.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ntt_flutter_test/model/currency_model.dart' as _i12;
import 'package:ntt_flutter_test/net/api/base_api.dart' as _i2;
import 'package:ntt_flutter_test/repository/currency_repository.dart' as _i5;
import 'package:ntt_flutter_test/viewmodel/currency_list_viewmodel.dart'
    as _i11;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeBaseApi_0 extends _i1.Fake implements _i2.BaseApi {}

class _FakeResponse_1 extends _i1.Fake implements _i3.Response {}

class _FakeStreamedResponse_2 extends _i1.Fake implements _i4.StreamedResponse {
}

class _FakeCurrencyRepository_3 extends _i1.Fake
    implements _i5.CurrencyRepository {}

/// A class which mocks [CurrencyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyRepository extends _i1.Mock
    implements _i5.CurrencyRepository {
  MockCurrencyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseApi get currencyApi =>
      (super.noSuchMethod(Invocation.getter(#currencyApi),
          returnValue: _FakeBaseApi_0()) as _i2.BaseApi);
  @override
  set currencyApi(_i2.BaseApi? _currencyApi) =>
      super.noSuchMethod(Invocation.setter(#currencyApi, _currencyApi),
          returnValueForMissingStub: null);
  @override
  _i6.Future<Map<String, dynamic>> fetchAllCurrency() => (super.noSuchMethod(
          Invocation.method(#fetchAllCurrency, []),
          returnValue: Future<Map<String, dynamic>>.value(<String, dynamic>{}))
      as _i6.Future<Map<String, dynamic>>);
  @override
  _i6.Future<Map<String, dynamic>> fetchLatestRate(String? code) =>
      (super.noSuchMethod(Invocation.method(#fetchLatestRate, [code]),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i6.Future<Map<String, dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i7.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i6.Future<_i3.Response>);
  @override
  _i6.Future<_i3.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i6.Future<_i3.Response>);
  @override
  _i6.Future<_i3.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i6.Future<_i3.Response>);
  @override
  _i6.Future<_i3.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i6.Future<_i3.Response>);
  @override
  _i6.Future<_i3.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i6.Future<_i3.Response>);
  @override
  _i6.Future<_i3.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i6.Future<_i3.Response>);
  @override
  _i6.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i6.Future<String>);
  @override
  _i6.Future<_i9.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i9.Uint8List>.value(_i9.Uint8List(0)))
          as _i6.Future<_i9.Uint8List>);
  @override
  _i6.Future<_i4.StreamedResponse> send(_i10.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_2()))
          as _i6.Future<_i4.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CurrencyListViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyListViewModel extends _i1.Mock
    implements _i11.CurrencyListViewModel {
  MockCurrencyListViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.CurrencyRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeCurrencyRepository_3()) as _i5.CurrencyRepository);
  @override
  set repository(_i5.CurrencyRepository? _repository) =>
      super.noSuchMethod(Invocation.setter(#repository, _repository),
          returnValueForMissingStub: null);
  @override
  List<_i12.Currency> get currencyList =>
      (super.noSuchMethod(Invocation.getter(#currencyList),
          returnValue: <_i12.Currency>[]) as List<_i12.Currency>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i6.Future<void> filterCurrency(String? value) =>
      (super.noSuchMethod(Invocation.method(#filterCurrency, [value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> fetchCurrencies() =>
      (super.noSuchMethod(Invocation.method(#fetchCurrencies, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void addListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i13.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
